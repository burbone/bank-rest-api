openapi: 3.0.3
info:
  title: Bank Cards Management System API
  description: REST API для управления банковскими картами с JWT аутентификацией
  version: 1.0.0
  contact:
    name: API Support

servers:
  - url: http://localhost:8080
    description: Development server

security:
  - bearerAuth: []

tags:
  - name: Authentication
    description: User authentication and registration
  - name: Cards
    description: Card management operations
  - name: Transfers
    description: Money transfer operations between own cards

paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Creates a new user account with USER role
      operationId: register
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticates user and returns JWT token
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /api/cards:
    get:
      tags:
        - Cards
      summary: Get all cards
      description: Returns list of all cards (ADMIN only)
      operationId: getAllCards
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardDto'
    post:
      tags:
        - Cards
      summary: Create new card
      description: Creates a new card for specified user (ADMIN only)
      operationId: createCard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'

  /api/cards/{id}:
    get:
      tags:
        - Cards
      summary: Get card by ID
      description: Returns card details (owner or ADMIN only)
      operationId: getCardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'
    delete:
      tags:
        - Cards
      summary: Delete card
      description: Deletes card (ADMIN only)
      operationId: deleteCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK

  /api/cards/my:
    get:
      tags:
        - Cards
      summary: Get cards
      description: Returns paginated list of current user's cards
      operationId: getMyCards
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardDto'

  /api/cards/{id}/block:
    put:
      tags:
        - Cards
      summary: Block card
      description: Blocks the card (owner or ADMIN)
      operationId: blockCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'

  /api/cards/{id}/activate:
    put:
      tags:
        - Cards
      summary: Activate card
      description: Activates blocked card (ADMIN only)
      operationId: activateCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'

  /api/transfers:
    post:
      tags:
        - Transfers
      summary: Transfer money
      description: Transfers money between user's own cards
      operationId: transfer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDto'

  /api/transfers/{id}:
    get:
      tags:
        - Transfers
      summary: Get transaction by ID
      description: Returns transaction details
      operationId: getTransactionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDto'

  /api/transfers/my:
    get:
      tags:
        - Transfers
      summary: Get my transactions
      description: Returns all transactions related to user's cards
      operationId: getMyTransactions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionDto'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        username:
          type: string
        role:
          type: string

    CardCreateRequest:
      type: object
      required:
        - cardNumber
        - cardHolder
        - expireDate
        - ownerId
      properties:
        cardNumber:
          type: string
          pattern: '\d{16}'
          example: "3460019394254975"
        cardHolder:
          type: string
        expireDate:
          type: string
          format: date
          example: "2025-10-07"
        ownerId:
          type: integer
          format: int64

    CardDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        maskedCardNumber:
          type: string
          example: "**** **** **** 1234"
        cardHolder:
          type: string
        expireDate:
          type: string
          format: date
        status:
          type: string
          enum: [ACTIVE, BLOCKED, EXPIRED]
        balance:
          type: number
        ownerId:
          type: integer
          format: int64
        ownerUsername:
          type: string

    TransferRequest:
      type: object
      required:
        - fromCardId
        - toCardId
        - amount
      properties:
        fromCardId:
          type: integer
          format: int64
        toCardId:
          type: integer
          format: int64
        amount:
          type: number
          minimum: 0.01
          exclusiveMinimum: false

    TransactionDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fromCardMasked:
          type: string
        toCardMasked:
          type: string
        amount:
          type: number
        transactionDate:
          type: string
          format: date-time
        status:
          type: string
        description:
          type: string

    PageCardDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean

    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean

    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean